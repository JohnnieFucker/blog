---
layout: post
status: publish
published: true
title: 《mysql性能调优与架构设计》读书笔记——第三章
author: JohnnieFucker
excerpt: "<strong>第三章MySQL存储引擎简介</strong>\r\n\r\n<strong>MyISAM</strong>\r\nMyISAM支持以下三种类型的索引\r\nb-tree，所有索引节点都按照balance
  tree的数据结构来存储。所有的索引数据节点都在叶节点。最常用，但参与一个索引的所有字段的长度之和不能超过1000字节。\r\nr-tree，主要设计为存储空间和多维数组的字段做索引，目前仅支持geometry类型的字段做索引。很少用到\r\nfull-text，就是我们常说的全文缩影，主要解决like查询效率低的问题。常用\r\n"
post_id: 212
wordpress_url: http://www.oushit.com/?p=212
date: '2009-10-13 01:08:43 +0800'
date_gmt: '2009-10-12 17:08:43 +0800'
category: Technology
tags:
- mysql
- 性能优化
- 架构设计
- 存储引擎
comments: []
---
<p><strong>第三章MySQL存储引擎简介</strong></p>
<p><strong>MyISAM</strong><br />
MyISAM支持以下三种类型的索引<br />
b-tree，所有索引节点都按照balance tree的数据结构来存储。所有的索引数据节点都在叶节点。最常用，但参与一个索引的所有字段的长度之和不能超过1000字节。<br />
r-tree，主要设计为存储空间和多维数组的字段做索引，目前仅支持geometry类型的字段做索引。很少用到<br />
full-text，就是我们常说的全文缩影，主要解决like查询效率低的问题。常用<br />
<!--break--><a id="more-212"></a></p>
<p><strong>innoDB</strong><br />
支持事务安全，实现了行锁定。其行锁定是通过索引来完成的。</p>
<p><strong>NDB Cluster</strong><br />
主要用于mysql cluster分布式集群环境。一般来说一个mysql cluster环境主要由以下三部分组成<br />
1负责管理各个节点的manage节点主机，保存整个cluster环境的配置，同时担任集群中各节点的基本沟通工作，所以必须是最新启动的节点。<br />
2sql层的sql服务器节点，主要负责实现一个数据库在存储层之上的所有事情，如连接管理，query优化和响应，cache管理等等。其启动与普通mysqlserver启动有一定区别，需要添加ndbcluster项，可以添加在my.cnf文件中，也可以通过启动命令配置。<br />
3storage层的NDB数据节点，NDB是一个内存存储引擎，最新版已经支持非索引字段不用全部加载到内存中。每个NDB节点保存完整数据的一部分或是全部，多个NDB节点形成一个NDB Group。其主配置文件在管理节点的config.ini中，有一个重要参数叫NoOfReplicas，这个参数指定每一份数据冗余存储在不同节点上的份数。</p>
<p><strong>其他存储引擎</strong> 略</p>
<p>关于db设计的时候如何选取存储引擎，我推荐公司一位同事alanshao 的文章《InnoDB还是MyISAM 再谈MySQL存储引擎的选择》，转载如下。</p>
<blockquote><p>
两种类型最主要的差别就是Innodb 支持事务处理与外键和行级锁.而MyISAM不支持.所以MyISAM往往就容易被人认为只适合在小项目中使用。<br />
我作为使用MySQL的用户角度出发，Innodb和MyISAM都是比较喜欢的，但是从我目前运维的数据库平台要达到需求：99.9%的稳定性，方便的扩展性和高可用性来说的话，MyISAM绝对是我的首选。<br />
原因如下：<br />
1、首先由于互联网项目的特点，平台上承载的大部分项目是读多写少的项目，而MyISAM的读性能是比Innodb强不少的。<br />
2、MyISAM的索引和数据是分开的，并且索引是有压缩的，内存使用率就对应提高了不少。能加载更多索引，而Innodb是索引和数据是紧密捆绑的，没有使用压缩从而会造成Innodb比MyISAM体积庞大不小。<br />
3、从平台角度来说，经常隔1，2个月就会发生应用开发人员不小心update一个表where写的范围不对，导致这个表没法正常用了，这个时候MyISAM的优越性就体现出来了，随便从当天拷贝的压缩包取出对应表的文件，随便放到一个数据库目录下，然后dump成sql再导回到主库，并把对应的binlog补上。如果是Innodb，恐怕不可能有这么快速度，因为Innodb定期用导出xxx.sql机制备份，而往往最小的一个数据库实例的数据量基本都是几十G大小。<br />
4、从我接触的应用逻辑来说，select count(*) 和order by 是最频繁的，大概能占了整个sql总语句的60%以上的操作，而这种操作Innodb其实也是会锁表的，很多人以为Innodb是行级锁，那个只是 where对它主键是有效，非主键的都会锁全表的。<br />
5、还有就是经常有很多应用部门需要我给他们定期某些表的数据，MyISAM的话很方便，只要发给他们对应那表的frm.MYD,MYI的文件，让他们自己在对应版本的数据库启动就行，而Innodb就需要导出xxx.sql了，因为光给别人文件，受字典数据文件的影响，对方是无法使用的。<br />
6、如果和MyISAM比insert写操作的话，Innodb还达不到MyISAM的写性能，如果是针对基于索引的update操作，虽然MyISAM可能会逊色Innodb,但是那么高并发的写，从库能否追的上也是一个问题，还不如通过多实例分库分表架构来解决。<br />
7、如果是用MyISAM的话，merge引擎可以大大加快应用部门的开发速度，他们只要对这个merge表做一些select count(*)操作，非常适合大项目总量约几亿的rows某一类型(如日志，调查统计)的业务表。<br />
当然Innodb也不是绝对不用，用事务的项目如模拟炒股项目，我就是用Innodb的，活跃用户几十万时候，也是很轻松应付了，因此我个人也是很喜欢Innodb的，只是如果从数据库平台应用出发，我还是会首选MyISAM。<br />
另外，可能有人会说你MyISAM无法抗太多写操作，但是可以通过架构来弥补，之前我所管的数据库平台容量：主从数据总量在百T以上，每天20多亿的读写量。峰值达到每秒10万次。机器的平均负载在1-2，峰值不超过10左右。
</p></blockquote>
<p>以上内容参考《mysql性能调优与架构设计》第三章和《InnoDB还是MyISAM 再谈MySQL存储引擎的选择》，转载请注明出处<a href="http://www.oushit.com/?p=212">http://www.oushit.com/?p=212</a> </p>
